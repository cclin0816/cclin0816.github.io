<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cpp Note (1) - Inheritance</title>
    <link href="/2022/09/30/Cpp-Note-1-Inheritance/"/>
    <url>/2022/09/30/Cpp-Note-1-Inheritance/</url>
    
    <content type="html"><![CDATA[<p>Inheritance! Will I be wealthy after this?</p><span id="more"></span><h2 id="Basic-Inheritance">Basic Inheritance</h2><p>Inheritance is a basic concept in OOP, so let’s start with a classic example.</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> A_unique_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> share_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> B_unique_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> share_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> C_unique_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> share_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> D_unique_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> share_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>The structure layout looks like this:</p><figure><div class="code-wrapper"><pre class="line-numbers language-TEXT" data-language="TEXT"><code class="language-TEXT">  A       B       C       D+---+   +---+   +---+   +---+| A |   | A |   | A |   | A |+---+   +---+   +---+   +---+        | B |   | C |   | B |        +---+   +---+   +---+                        | A |                        +---+                        | C |                        +---+                        | D |                        +---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Note that struct D has two copies of struct A, so accessing <code>D::A</code> is ambiguous.<br>Accessing member variables:</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">D d<span class="token punctuation">;</span><span class="token comment">// error: request for member 'A_unique_name' is ambiguous</span>d<span class="token punctuation">.</span>A_unique_name <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// OK, get D::B::A::A_unique_name</span>d<span class="token punctuation">.</span>B<span class="token double-colon punctuation">::</span>A_unique_name <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// OK, get D::C::A::A_unique_name</span>d<span class="token punctuation">.</span>C<span class="token double-colon punctuation">::</span>A_unique_name <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// OK, all other unique names are not ambiguous</span>d<span class="token punctuation">.</span>B_unique_name <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// OK, get D::share_name</span>d<span class="token punctuation">.</span>share_name <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// OK, get D::B::share_name</span>d<span class="token punctuation">.</span>B<span class="token double-colon punctuation">::</span>share_name <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// OK, get D::C::share_name</span>d<span class="token punctuation">.</span>C<span class="token double-colon punctuation">::</span>share_name <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// No way to get D::B::A::share_name or D::C::A::share_name unless downcasting</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Accessing base class (downcast):</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// OK, get D::B</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// OK, get D::C</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>C <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// error: 'A' is an ambiguous base of 'D'</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// OK, get D::B::A</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// OK, get D::C::A</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>C <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>A downcast to non-virtual base class or accessing its member variable is an offset calculation, since layouts are fixed.</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">use_C</span><span class="token punctuation">(</span>C <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">use_B_unique</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">use_D</span><span class="token punctuation">(</span>D <span class="token operator">&amp;</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">use_C</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">use_B_unique</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>B_unique_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Assembly output:</p><figure><div class="code-wrapper"><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">use_D(D<span class="token operator">&amp;</span>):                # D at <span class="token operator">%</span><span class="token register variable">rdi</span>  push    <span class="token register variable">rbx</span>  mov     <span class="token register variable">rbx</span>, <span class="token register variable">rdi</span>  add     <span class="token register variable">rdi</span>, <span class="token number">16</span>         # downcast to C  call    use_C(C<span class="token operator">&amp;</span>)@PLT  add     <span class="token register variable">rbx</span>, <span class="token number">8</span>          # access B_unique_name  mov     <span class="token register variable">rdi</span>, <span class="token register variable">rbx</span>  call    use_B_unique(int<span class="token operator">&amp;</span>)@PLT  pop     <span class="token register variable">rbx</span>  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Virtual-Inheritance">Virtual Inheritance</h2><p>Virtual inheritance is a way to avoid multiple copies of the same base class.</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> A_unique_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> share_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> B_unique_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> share_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> C_unique_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> share_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> D_unique_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> share_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>The structure layout looks like this:</p><figure><div class="code-wrapper"><pre class="line-numbers language-TEXT" data-language="TEXT"><code class="language-TEXT">  A        B            C       D+---+   +------+   +------+   +------+| A |   | B-VT |   | C-VT |   | B-VT |+---+   +------+   +------+   +------+        |  B   |   |  C   |   |  B   |        +------+   +------+   +------+        |  A   |   |  A   |   | C-VT |        +------+   +------+   +------+                              |  C   |                              +------+                              |  D   |                              +------+                              |  A   |                              +------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><div class="note note-info">            <p>VT stands for virtual table or vtable, see <a href="/2022/09/30/Cpp-Note-3-Virtual-Table/" title="Cpp Note (3) - Virtual Table">Cpp Note (3) - Virtual Table</a>.</p>          </div><p>Accessing member variables:</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">D d<span class="token punctuation">;</span><span class="token comment">// OK, all unique names are not ambiguous</span>d<span class="token punctuation">.</span>A_unique_name <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// OK, get D::share_name</span>d<span class="token punctuation">.</span>share_name <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// OK, get D::B::share_name</span>d<span class="token punctuation">.</span>B<span class="token double-colon punctuation">::</span>share_name <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// OK, get D::C::share_name</span>d<span class="token punctuation">.</span>C<span class="token double-colon punctuation">::</span>share_name <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// OK, get D::A::share_name</span>d<span class="token punctuation">.</span>A<span class="token double-colon punctuation">::</span>share_name <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Accessing base class (downcast):</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// OK, get D::B</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// OK, get D::C</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>C <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// All OK, get D::A</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>C <span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>A downcast to virtual base class or accessing its member variable will lookup vbase offset in vtable, and then calculate the offset.</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">use_A</span><span class="token punctuation">(</span>A <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">use_D</span><span class="token punctuation">(</span>D <span class="token operator">&amp;</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">use_A</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Assembly output:</p><figure><div class="code-wrapper"><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">use_D(D<span class="token operator">&amp;</span>):              # D at <span class="token operator">%</span><span class="token register variable">rdi</span>  push    <span class="token register variable">rax</span>  mov     <span class="token register variable">rax</span>, qword ptr <span class="token operator">[</span><span class="token register variable">rdi</span><span class="token operator">]</span>        # read vtable pointer  add     <span class="token register variable">rdi</span>, qword ptr <span class="token operator">[</span><span class="token register variable">rax</span> <span class="token operator">-</span> <span class="token number">24</span><span class="token operator">]</span>   # read vbase offset and calculate  call    use_A(A<span class="token operator">&amp;</span>)@PLT  pop     <span class="token register variable">rax</span>  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Note that same class that’s virtually inherited multiple times will merge into single object.</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">virtual</span> <span class="token class-name">B</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">virtual</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">virtual</span> <span class="token class-name">C</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">E</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">virtual</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">virtual</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token keyword">virtual</span> <span class="token class-name">D</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>There will be one copy of A, B, C, and D in E.</p><p>But non-virtual base classes will not merge with virtual ones.</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// this A won't merge with virtual A</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>There will be two copies of A in D.</p><h2 id="Functions">Functions</h2><p>Normal member functions are similar to member variables, and <a href="/2022/09/30/Cpp-Note-2-Virtual-Function/" title="Cpp Note (2) - Virtual Function">virtual function</a> will be discussed later.</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">B b<span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// B::f()</span>b<span class="token punctuation">.</span><span class="token class-name">A</span><span class="token double-colon punctuation">::</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// A::f() == static_cast&lt;A &amp;>(b).f()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>Note that member functions will pass <code>this</code> pointer as the first argument, so it will trigger a downcast if the function is inherited.</p><h2 id="Constructor-and-Destructor">Constructor and Destructor</h2><p>Constructors will be called in the order of post-order traversal of the inheritance tree (where the root is the most derived class), and virtual base classes’ constructor will be called before non-virtual ones.</p><p>Destructor will be called in the reverse order of constructors.</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">struct</span> <span class="token class-name">X</span> <span class="token punctuation">&#123;</span>    <span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"X "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~X "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Y</span> <span class="token punctuation">&#123;</span>    <span class="token function">Y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Y "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~Y "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~A "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">virtual</span> <span class="token class-name">X</span></span> <span class="token punctuation">&#123;</span>    <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~B "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">virtual</span> <span class="token class-name">Y</span><span class="token punctuation">,</span> <span class="token keyword">virtual</span> <span class="token class-name">X</span></span> <span class="token punctuation">&#123;</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~C "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span></span> <span class="token punctuation">&#123;</span>    <span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"D "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~D "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> D d<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Output:</p><figure><div class="code-wrapper"><pre class="line-numbers language-TEXT" data-language="TEXT"><code class="language-TEXT">X Y A B A C D ~D ~C ~A ~B ~A ~Y ~X <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="Structure-Layout">Structure Layout</h2><p>Normally, the layout will be like this:</p><figure><div class="code-wrapper"><pre class="line-numbers language-TEXT" data-language="TEXT"><code class="language-TEXT">+-------------------+| VT PTR if needed  |+-------------------+| non-virtual bases |+-------------------+| member variables  |+-------------------+|   virtual bases   |+-------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><div class="note note-info">            <p>If a class has virtual base classes or virtual functions, it will have a vtable pointer at the beginning of the structure, and will be merge into the non-virtual base class if possible.</p>          </div><p>Layouts of base classes is also in the order of post-order traversal of the inheritance tree, but with virtual bases at the end.</p><div class="note note-warning">            <p>Struct layout isn’t guaranteed to be the same across different compilers (I guess it’s not standardized ?), and <code>randomize_layout</code> also breaks the layout.</p>          </div><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-TEXT" data-language="TEXT"><code class="language-TEXT">              Clang                    MSVC      +--------------------+  +--------------------+0x00  | D-VT override C-VT |  |        B::a        |      +--------------------+  +--------------------+0x08  |        C::a        |  |       B::A::a      |      +--------------------+  +--------------------+0x10  |       B::A::a      |  | D-VT override C-VT |      +--------------------+  +--------------------+0x18  |        B::a        |  |        C::a        |      +--------------------+  +--------------------+0x20  |        D::a        |  |        D::a        |      +--------------------+  +--------------------+0x28  |      virt A::a     |  |      virt A::a     |      +--------------------+  +--------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Cpp-Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp</tag>
      
      <tag>Inheritance</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bare Metal Cpp</title>
    <link href="/2022/02/11/Bare-Metal-Cpp/"/>
    <url>/2022/02/11/Bare-Metal-Cpp/</url>
    
    <content type="html"><![CDATA[<p>things about using c++ in bare metal situations</p><span id="more"></span><h2 id="Intro">Intro</h2><p>C++ has a lot of abstractions and containers, so normally it requires standard library support, but standard library might cause large, uncontrollable, non-deterministic binary generation.</p><p>External static library isn’t feasible on bare metal, since libraries are packed, unless you cherry pick the library source code and recompile it, otherwise symbols linked to <code>libc.a</code>, <code>libc++.a</code>, <code>libstdc++.a</code>,… is no go.</p><p>Library headers are likely to create symbols linked to static library, but some header won’t, so it’s possible to use some (part of) <a href="#Standard-Library">library</a></p><div class="note note-info">            <p>Library header is usable as long as external static library isn’t linked, but It means you need to provide the symbol when linking, ex. get <code>memcpy</code> from <a href="https://github.com/ARM-software/optimized-routines">optimized-routines</a> to resolve <code>memcpy</code> symbol needed by <code>std::vector</code></p>          </div><h2 id="C">C++</h2><div class="note note-info">            <p>add <code>-ffreestanding</code> when compiling, it means no OS support and sets <code>__STDC_HOSTED__</code> to 0</p>          </div><div class="note note-info">            <p>add <code>-nostdlib</code> to disable linkage of static library</p>          </div><div class="note note-success">            <p>see code output on <a href="https://godbolt.org/">compiler explorer</a></p>          </div><h3 id="Startup">Startup</h3><h4 id="Stack-Pointer">Stack Pointer</h4><p>stack pointer needs to be set</p><h4 id="BSS">BSS</h4><p>zeroing bss section is required, typically uses <code>__bss_start</code> and <code>__bss_end</code> in linker script to know the span of <code>.bss</code> section</p><figure><div class="code-wrapper"><pre class="line-numbers language-linker-script" data-language="linker-script"><code class="language-linker-script"><span class="token section keyword">.bss</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>  __bss_start <span class="token operator">=</span> <span class="token location-counter important">.</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token section keyword">.bss</span> <span class="token section keyword">.bss</span>.<span class="token operator">*</span><span class="token punctuation">)</span>  <span class="token operator">*</span><span class="token punctuation">(</span>COMMON<span class="token punctuation">)</span>  <span class="token location-counter important">.</span> <span class="token operator">=</span> <span class="token function">ALIGN</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  __bss_end <span class="token operator">=</span> <span class="token location-counter important">.</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="Global-Variable-Constructor">Global Variable Constructor</h4><p>non-trivially constructable global variable requires call to constructor at startup, typically uses <code>__init_array_start</code> and <code>__init_array_end</code> to know the span of <code>.init_array</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ntctor</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">ntctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>ntctor ntctor_gv<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-x86asm" data-language="x86asm"><code class="language-x86asm">_GLOBAL__sub_I_example.cpp:   b       ctor()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>.init_array section is an array of pointers to function that needs to be invoke at startup, ex. _GLOBAL__sub_I_example.cpp</p><figure><div class="code-wrapper"><pre class="line-numbers language-symbol" data-language="symbol"><code class="language-symbol">[Nr]  Name         Type        Address  Offset Size  EntSize  Flags  Link  Info  Align[ 6]  .init_array  INIT_ARRAY  0        48     8     0        WA     0     0     8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-linker-script" data-language="linker-script"><code class="language-linker-script"><span class="token section keyword">.rodata</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token section keyword">.rodata</span> <span class="token section keyword">.rodata</span>.<span class="token operator">*</span><span class="token punctuation">)</span>  __init_array_start <span class="token operator">=</span> <span class="token location-counter important">.</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token section keyword">.init_array</span><span class="token punctuation">)</span>  __init_array_end <span class="token operator">=</span> <span class="token location-counter important">.</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><div class="note note-warning">            <p>initialize order is non-deterministicand bug prone, use only if you need it</p>          </div><h4 id="Main-Funtion">Main Funtion</h4><p>branch to main fuction</p><h3 id="Runtime">Runtime</h3><h4 id="Dynamic-Memory">Dynamic Memory</h4><p><a href="https://en.cppreference.com/w/cpp/memory/new/operator_new">new</a> and <a href="https://en.cppreference.com/w/cpp/memory/new/operator_delete">delete</a> by standard, requires to emit exact symbol, and these symbol can be easily produced just by calling your memory allocation or deallocation function</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-x86asm" data-language="x86asm"><code class="language-x86asm">alloc():  mov edi, 8  jmp operator new[](unsigned long)                           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">my_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><div class="note note-warning">            <p>some embedded or realtime application can’t afford using dynamic memory</p>          </div><h4 id="Exceptions">Exceptions</h4><div class="note note-warning">            <p>using exceptions produces a bunch of symbols<br>exceptions are normally disabled since it either needs OS support or having huge binary, and throwing exception is costly, because of allocation, unwinding, and class inherit tree traverse</p>          </div><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">func_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">func_fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func_try</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token function">func_throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">func_fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>using exceptions</p><figure><div class="code-wrapper"><pre class="line-numbers language-x86asm" data-language="x86asm"><code class="language-x86asm">func_throw():   push    rax  mov     edi, 8  call    __cxa_allocate_exception  mov     qword ptr [rax], offset vtable for std::exception+16  mov     esi, offset typeinfo for std::exception  mov     edx, offset std::exception::~exception() [complete object dtor]  mov     rdi, rax  call    __cxa_throw...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>can’t throw and catch if exceptions disabled<br>but still able to use throwable library</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">func_throw</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-x86asm" data-language="x86asm"><code class="language-x86asm">....LBB0_12:  mov     edi, offset .L.str  call    std::__throw_length_error(char const*).L.str:  .asciz  &quot;vector::_M_realloc_insert&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><div class="note note-warning">            <p>resolve symbol with abort, since unrecoverable error (ex. OOM error) should cause abort, beware if the function is easily throwable (recoverable error)</p>          </div><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">[</span>noreturn<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">void</span> std<span class="token double-colon punctuation">::</span><span class="token function">__throw_length_error</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><div class="note note-info">            <p>to disable exception use <code>-fno-exceptions</code> <code>-fno-unwind-tables</code> when compiling</p>          </div><h4 id="RTTI">RTTI</h4><div class="note note-warning">            <p>runtime type information is used by dynamic_cast, which is easily throwable, unless exceptions are present, there’s no reason to use dynamic cast, rtti creates typeinfo, which is used for inherit tree traverse when dynamic_cast, which causes huge code footprint and unbounded run time</p>          </div><div class="note note-info">            <p>to disable rtti use <code>-fno-rtti</code> when compiling</p>          </div><h4 id="Static-Variable">Static Variable</h4><p>c++ defaults thread safe static variable initialization, which requires <code>__cxa_guard_acuire/release</code> symbol</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-x86asm" data-language="x86asm"><code class="language-x86asm">....LBB0_1:  mov     edi, offset guard variable for inc()::count  call    __cxa_guard_acquire...  mov     edi, offset guard variable for inc()::count  call    __cxa_guard_release...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><div class="note note-info">            <p>use atomic to implement guard function</p>          </div><div class="note note-info">            <p>to disable thread safe static variable initialization use <code>-fno-threadsafe-statics</code> when compiling</p>          </div><h4 id="Abstract-Class">Abstract Class</h4><p>abstract class might need <code>__cxa_pure_virtual</code> symbol, just implement it as abort, newer compiler forbids such abuse, and is unlikely to emit this symbol</p><h3 id="Exit">Exit</h3><h4 id="Global-and-Static-Variable-Destructor">Global and Static Variable Destructor</h4><p>non-trivially destructable global and static variable requires call to destructor at exit, since destruct order requires to be the reverse order of constuct order, it chains exit function dynamically<br>for global exit function chains at startup, which uses <a href="#Global-Variable-Constructor">Global Variable Constructor</a><br>for static exit function chains at initialize</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">dtor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ntdtor</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token operator">~</span><span class="token function">ntdtor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ntdtor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>ntdtor ntdtor_gv<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-x86asm" data-language="x86asm"><code class="language-x86asm">_GLOBAL__sub_I_example.cpp:   mov     edi, offset ntdtor::~ntdtor() [base object destructor]  mov     esi, offset ntdtor_gv  mov     edx, offset __dso_handle  jmp     __cxa_atexit                    # TAILCALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><div class="note note-info">            <p><code>__cxa_atexit(void *obj, void (*destructor)(void *), void *ptr__dso_handle)</code>;<br>which stores <code>obj</code>, and <code>destructo</code>r to <code>*ptr__dso_hande</code>, than modify <code>ptr__dso_handle</code> to handle next call to <code>__cxa_exit</code><br>requires large enough space of <code>__dso_handle</code> to store destruct pairs</p>          </div><div class="note note-warning">            <p>use it only if needed, since bare metal rarely returns from main</p>          </div><div class="note note-info">            <p>to suppress symbols just create empty function of <code>__cxa_atexit</code>, and a global pointer <code>__dso_handle</code> of nullptr</p>          </div><h2 id="Standard-Library">Standard Library</h2><p><a href="https://en.cppreference.com/w/cpp/freestanding">Freestanding Implementation</a></p><h3 id="Definitions">Definitions</h3><p>won’t produce extern symbols</p><ul><li>cstddef</li><li>limits ?</li><li>climits ?</li><li>cfloat ?</li><li>version ?</li><li>cstdint</li><li>type_traits</li><li>concepts</li><li>typeinfo ?</li><li>source_location ?</li></ul><h3 id="Freestanding">Freestanding</h3><p>tools of language, which doesn’t need OS support, but still might need some symbol resolved, ex. <code>memcpy</code></p><ul><li>initializer_list ?</li><li>bit</li><li>cstdarg</li><li>compare ?</li><li>atomic (some new feature is system depended, ex. wait)</li><li>new</li></ul><h3 id="System-Depended">System Depended ?</h3><p>some part of it will work, depends on implementation, others requires some symbols to be resolved ex. <code>Unwind</code></p><ul><li>coroutine</li><li>exception</li><li>cstdlib</li></ul><h3 id="Others">Others</h3><p>thanks to constexpr and template function, constexpr and template function is defined in header for compile time support (also increase compile time significantly), so using it is like cherry picking the library, and is less likely to produce external symbols. Check the compiled output to determine whether it is usable, for example:</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sort_int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> ptr <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p><code>sort_int</code> create symbol of <code>std::__introsort_loop</code> and <code>std::__final_insertion_sort</code>, but the code is produced by template function, <code>introsort</code> also creates symbol of <code>__make_heap</code>, and <code>final</code> creates symbol to <code>memmove</code>, which is the only external symbol we need to provide</p><div class="note note-warning">            <p>standard library might cause unexpected behaivior when used in bare metal<br>ex. it’s throwable, exceptions are turned off, and has a abort symbol<br>use it only if you know what it’s doing, otherwise write your own</p>          </div><div class="note note-info">            <p>containers are like functions, most of it actually works fine</p>          </div><h2 id="Template">Template</h2><div class="note note-warning">            <p>using template functions and containers can cause bloated binary<br>for resource intensive system, use it carefully</p>          </div><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">v_1</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">></span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">v_2</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token operator">*</span><span class="token operator">></span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>v_1</code> and <code>v_2</code> produces same exact code, but not squashed</p><h2 id="Reference">Reference</h2><p><a href="https://arobenko.github.io/bare_metal_cpp/">Practical Guide to Bare Metal C++</a></p>]]></content>
    
    
    <categories>
      
      <category>Cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp</tag>
      
      <tag>Clang</tag>
      
      <tag>GCC</tag>
      
      <tag>Bare Metal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Tag Plugins</title>
    <link href="/2022/02/11/Hexo-Tag-Plugins/"/>
    <url>/2022/02/11/Hexo-Tag-Plugins/</url>
    
    <content type="html"><![CDATA[<p>Note of tag plugins’ syntax, also works as checklist after theme updates.</p><span id="more"></span><h2 id="Block-Quote">Block Quote</h2><blockquote><p>I am who I am and I have the need to be.</p><footer><strong>Antoine de Saint-Exupéry</strong><cite>The Little Prince</cite></footer></blockquote><h2 id="Code-Block">Code Block</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token keyword">constexpr</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token keyword">auto</span> f<span class="token punctuation">,</span> <span class="token keyword">auto</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span><span class="token keyword">requires</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span><span class="token function">invoke</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> ps<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">invoke</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> ps<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>f<span class="token punctuation">,</span> ps<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> qs<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> ps<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> qs<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Pull-Quote">Pull Quote</h2><blockquote class="pullquote"><p>quote with class</p></blockquote><blockquote><p>quote without class</p></blockquote><h2 id="jsFiddle">jsFiddle</h2><iframe scrolling="no" width="100%" height="360" src="https://jsfiddle.net/kizu/zfUyN/embedded/result/light" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="Gist">Gist</h2><script src="//gist.github.com/704490cbbc07822e53968a159f3e3862.js?file=hello_world.rs"></script><h2 id="iframe">iframe</h2><iframe src="/about/" width="100%" height="360" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="Include-Code">Include Code</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>example.py</span><a href="/downloads/code/example.py">view raw</a></div><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">=</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, World!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="YouTube">YouTube</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/zI383uEwA6Q" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="Post-Link">Post Link</h2><a href="/2022/02/11/Hexo-Tag-Plugins/" title="Hexo Tag Plugins">Hexo Tag Plugins</a><h2 id="Raw">Raw</h2>{% raw %}{% endraw %}<h2 id="Note">Note</h2><div class="note note-primary">            <p>primary</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-success">            <p>success</p>          </div><div class="note note-danger">            <p>danger</p>          </div><div class="note note-warning">            <p>warning</p>          </div><div class="note note-info">            <p>info</p>          </div><div class="note note-light">            <p>light</p>          </div><h2 id="Check-Box">Check Box</h2><div>            <input type="checkbox" disabled >None          </div> None-text<div>            <input type="checkbox" disabled checked="checked">Check          </div> Check-text            <input type="checkbox" disabled >Inline           Inline-text<h2 id="Button">Button</h2><a class="btn" href="./"  title="title" target="_blank">text</a><h2 id="Group-Image">Group Image</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/miniQ-1.webp" alt="miniQ-1"></div><div class="group-image-wrap"><img src="/img/miniQ-2.webp" alt="miniQ-2"></div><div class="group-image-wrap"><img src="/img/miniQ-3.webp" alt="miniQ-3"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/miniQ-4.webp" alt="miniQ-4"></div><div class="group-image-wrap"><img src="/img/miniQ-5.webp" alt="miniQ-5"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/miniQ-6.webp" alt="miniQ-6"></div><div class="group-image-wrap"><img src="/img/miniQ-7.webp" alt="miniQ-7"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/miniQ-8.webp" alt="miniQ-8"></div><div class="group-image-wrap"><img src="/img/miniQ-9.webp" alt="miniQ-9"></div><div class="group-image-wrap"><img src="/img/miniQ-10.webp" alt="miniQ-10"></div></div></div><h2 id="Latex">Latex</h2><p>$$<br>E=mc^2<br>$$</p><h2 id="Mermaid">Mermaid</h2><pre><code class="mermaid" >pie showData    title Key elements in Product X    "Calcium" : 42.96    "Potassium" : 50.05    "Magnesium" : 10.01    "Iron" :  5</code></pre><h2 id="HTML">HTML</h2><h3> level 3 </h3><script> console.log('script works'); </script><!-- comment works --><h2 id="Fonts">Fonts</h2><p>regular text<br><strong>bold text</strong><br><em>italic text</em><br><strong><em>bold italic</em></strong><br><s>strikethrough text</s></p><h2 id="Tables">Tables</h2><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>left-aligned</td><td style="text-align:center">center-aligned</td><td style="text-align:right">right-aligned</td></tr><tr><td>2nd row</td><td style="text-align:center">2nd row</td><td style="text-align:right">2nd row</td></tr><tr><td>3rd row</td><td style="text-align:center">3rd row</td><td style="text-align:right">3rd row</td></tr></tbody></table><h2 id="Footnote">Footnote</h2><p>google<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.google.com">[1]</span></a></sup></p><section class="footnotes"><h2>Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.google.com">https://www.google.com</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writing This Blog</title>
    <link href="/2022/02/10/Writing-This-Blog/"/>
    <url>/2022/02/10/Writing-This-Blog/</url>
    
    <content type="html"><![CDATA[<p>關於寫這個 Blog 的一些紀錄</p><span id="more"></span><div class="note note-primary">            <p>Blog 的 source code 在 <a href="https://github.com/cclin0816/cclin0816.github.io/tree/source">source branch</a><br>static site publish 在 <a href="https://github.com/cclin0816/cclin0816.github.io">main branch</a></p>          </div><h2 id="Framework">Framework</h2><p>原本想用 hugo，用 Go 寫的好像很快，但是我好像不需要他很快，然後跟 Go 又沒很熟，另一個是 hexo，好處是 theme 很多，而且功能算齊全，看到了不錯的 theme 所以決定用 hexo，雖然之後有點被雷到。</p><h2 id="Theme">Theme</h2><p>theme 選了 <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>，滿好看的而且 document 做的還行，light mode 顏色有點爛掉，但我預設 dark mode 所以就算了，另外 renderer 換成了 <code>hexo-renderer-markdown-it</code>。</p><p>最後加了 google analytics 還有 giscus，雖然應該沒人會看我的 blog 也不會來留言，但是滿酷的所以加了。</p><h2 id="Mimikyu">Mimikyu</h2><p>放了很多迷你Q，大多是 <a href="https://twitter.com/metikyun/">@metikyun</a> 畫的，網站上寫可以非營利使用，所以就拿來用了，所以幫忙宣傳一下?<br><img src="/img/miniQ-d.webp" alt="Mimikyu"></p><h2 id="Pitfalls">Pitfalls</h2><p>hexo server 的 file watch 不包括 <code>_config.yml</code> 之類的，能理解為什麼這樣設計，但在初期改 theme 的時候還是很煩。</p><h2 id="Other">Other</h2><p>其實花很多時間弄圖片，優化檔案大小之類的，最後全用 webp，但是花最多時間 load 果然還是 js bundle，然後字體用 JetBrains Mono，加上一堆 fallback 的 monospace。</p><p>Gist 還有 Mermaid 的顏色有點爛掉，之後再改。</p><blockquote><p>感謝那些被我叫來測垃圾 blog 的人?</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>Blog</tag>
      
      <tag>Mimikyu</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[@import url('https://fonts.googleapis.com/css?family=JetBrains+Mono:r,i,b,bi');.markdown-body blockquote {  border-color: #b3b5b6;}.markdown-body .highlight pre,.markdown-body pre {  background-color: #6f7483;}.code-wrapper pre .caption {  border-bottom: 1px dashed #999;  padding-bottom: 0.2em;  margin-bottom: 0.5em;}.code-wrapper pre .caption span {  color: rgb(124, 151, 124);}.code-wrapper pre .caption a {  float: right;}.gist .blob-wrapper .highlight tr {  background-color: #F4F8FF;}.gist .blob-wrapper .highlight tr td {  border: 0px;}.gist .blob-wrapper .highlight tr:nth-child(2n) {  background-color: #f8faff;}.category-bar .list-group-item.active span {  font-family: 'JetBrains Mono', 'Cascadia Mono', Consolas, monospace;}]]></content>
    
  </entry>
  
  
  
</search>
